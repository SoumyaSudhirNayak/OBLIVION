#!/usr/bin/env python3
"""
Secure Certificate Generator for Data Wipe Verification

This script generates a signed certificate as a QR code after a successful data wipe.
It operates in a RAM-resident environment with no file system access and no network connection.

The certificate contains:
- Device identification information
- Wipe method and timestamp
- Cryptographic hash for integrity
- Digital signature for authenticity

Usage:
    python certificate_generator.py

The script will display a QR code containing the signed certificate that can be
scanned by the mobile verifier app for offline verification.
"""

import jwt
import qrcode
import time
import hashlib
import platform
import uuid
import subprocess
import os
from datetime import datetime
from PIL import Image, ImageTk
import tkinter as tk
from tkinter import messagebox
import io
import base64
from hardware_info import get_device_type, get_device_id


# HARDCODED PRIVATE KEY - Generated by generate_keys.py
PRIVATE_KEY = """-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCsdBXu1MwviIQE
6Qvwy/jVWEDpJtx/VHbD8JL5Dn8Jg+WjsQwap3F+MBgUX6TVeFgTDrqO/zPgKD7R
AuSTIQlwIN90+nk+5njvDCoUplXwhtt+Q8GoZfTH8uz7rqTuO0hZeUYmLbYtG2kz
NJwR1WMggEwuivFL1Tka2bADIMZo2JrYocY1oaal6JNf0b7kxPVz5fFQblr0C7UQ
Yn6j5bp5BSWCN5qLkuLZuicF2mdcmogubMvO9TkpscwLnUaK4GXX6ep35lMc1FyA
RRzUAj9Bq1GEHcOXzcZ8lgjGT3LGOyK6C+LK6jXZrzVepkeF/coCH93dGvx3uyxr
9KVXgRIJAgMBAAECggEATq5kN2R1iJZjjY36ebHGZShv7TBi1+Fkkn9XvzRC98dq
5aVonVyaJnWw9tKwdQkEPiWxLn73XyVdi6UjPpGLKdKFwWxqFy22LXLCXEuL2ELf
MBuf5sIlzXhjcW08KMl5eAEh5Vdjz+66r7coIebW5ERE/dM8xlmRRVPev36bp8ez
JlVkWKg7Lg5Ktubv4e2CQxoHOe/B9qKRTY6YPCIn41RylMzStzTJGXm4iyAdBHfc
wwu09YfHbY2GSZ2JxeO7eHQkERLgwzYk3JchJjkYHMlAkPed4W0IQAoIjHCJ+bMh
1KLxFS822ykmDbwbPrLsxgQpomvQUODT2K5vtWRxhQKBgQDoL5l3yRh+MmXomK7a
KVwsVyRg3r/bUcS/KjSN5PsJeR+K6DCyBpmaUteNNJB9r4/hENuEn05in5W3idim
MjA0DnYzW62u69XQNjvM+tSmA0qaaFwBNHKuDib6cug4Yp3furj97/PJMABm0N+O
16g8Tg9o/g38KGauEHMkaAvWJwKBgQC+JB4kIRpuslKfFvNNLQ+fpLHKfe7zeAM9
Kir62cv7FmByQeHKFS5LRd645+2x2XObePeL0oVhNWs7vCJHOaggWpvFPltVljFt
y4wtkJLjSznBzMqy7O7G6ni+HeawfoFdD5EsYLNaRyORZA3k4KhiAWs0Kpgp2nRh
GSAe7q+kTwKBgQC0khAwcFx0CI3ozpVtZS0h7sOD8rgSwQzZ/uDQWXxCach2Jw13
5lofAr5QOskEdjzXNF0ET0COwr2U98dduTpzwat7VZlFqHOocgUf7RLj6TtjyjWD
Wl61rpvxutuOvmM5U+X611oo5QPq8hZq6J0WCT9C0BHgQStZw8FIVwKdkQKBgFlu
kYK60zznwPa1C8DsBeI3y6wLaZ24gAV/1PFiCZBS6RA0rqenKLwc4/IinGk/dyHU
VtK8NSIQxxw0lAbeNpbpJ0Ux3DG4UA1tZMR1sLEZy9O8qEZaLMEAvcPmOoAfMGd+
D/FIlnNK7I7Q+bwCcxCNzEegFSvyZTTaZYJHD/P/AoGAe1pEEYHhCwF1axbhpsY4
ZeXrY6VugGPRQ8PKY2ZcJbjp5MODorR6kLOOn6XsFIug3u7E9KP8cxFbV5PlFaxw
/bjpxleEMqE5ljjpYL2p//maTkRyF3mWg9inWMzMRUETeUOGM/gNTvXcVaPTeSkm
BfghFptmmOTXmABztywt2lU=
-----END PRIVATE KEY-----"""


def get_device_info():
    """
    Gather device identification information using real hardware detection.
    
    Returns:
        dict: Device information including device type and device ID
    """
    try:
        # Use the hardware_info module for real hardware detection
        device_type = get_device_type()
        device_id = get_device_id()
        
        device_info = {
            'device_type': device_type,
            'device_id': device_id,
            'system_info': f'{platform.system()} {platform.release()}'
        }
        
        return device_info
        
    except Exception as e:
        # Fallback to generic identifiers if hardware detection fails
        return {
            'device_type': 'Unknown Device',
            'device_id': 'MB-SN-SN_NOT_FOUND-DISK-SN-SN_NOT_FOUND',
            'system_info': 'Unknown System'
        }


def generate_data_hash():
    """
    Generate a cryptographic hash representing the wiped data state.
    
    In a real implementation, this would be a hash of:
    - Pre-wipe disk sectors
    - Post-wipe verification data
    - Wipe pattern verification
    
    Returns:
        str: SHA-256 hash in hexadecimal format
    """
    # For demonstration, create a hash based on current system state
    # In reality, this would be based on actual wipe verification data
    hash_input = f"{time.time()}{platform.node()}{uuid.getnode()}"
    return hashlib.sha256(hash_input.encode()).hexdigest()


def create_certificate_payload():
    """
    Create the certificate payload with device information and wipe details.
    
    Returns:
        dict: Complete certificate payload ready for signing
    """
    # Get device information using real hardware detection
    device_info = get_device_info()
    
    # Generate unique certificate ID
    cert_id = str(uuid.uuid4())
    
    # Create the certificate payload with standard JWT fields
    current_timestamp = int(time.time())
    
    payload = {
        # Standard JWT fields
        'iss': 'OBLIVION',  # Issuer
        'iat': current_timestamp,      # Issued At
        
        # Custom certificate fields
        'certificateID': cert_id,
        'deviceType': device_info['device_type'],
        'deviceID': device_info['device_id'],
        'wipeMethod': 'DoD 5220.22-M (3-pass)',
        'wipeTimestamp': current_timestamp,
        'dataHash': generate_data_hash()
    }
    
    return payload


def sign_certificate(payload):
    """
    Sign the certificate payload using RS256 algorithm.
    
    Args:
        payload (dict): Certificate data to sign
        
    Returns:
        str: JWT token string
        
    Raises:
        Exception: If signing fails
    """
    try:
        # Sign the payload using RS256 algorithm
        token = jwt.encode(
            payload=payload,
            key=PRIVATE_KEY,
            algorithm='RS256'
        )
        
        return token
        
    except Exception as e:
        raise Exception(f"Failed to sign certificate: {str(e)}")


def generate_qr_code(jwt_token):
    """
    Generate a QR code containing the JWT token.
    
    Args:
        jwt_token (str): The signed JWT token
        
    Returns:
        PIL.Image: QR code image
    """
    # Create QR code with appropriate settings for JWT tokens
    qr = qrcode.QRCode(
        version=None,  # Auto-determine version based on data
        error_correction=qrcode.constants.ERROR_CORRECT_M,  # Medium error correction
        box_size=10,   # Increased size of each box in pixels for better display
        border=4,      # Border size in boxes
    )
    
    # Add JWT token data
    qr.add_data(jwt_token)
    qr.make(fit=True)
    
    # Create image with high contrast
    qr_image = qr.make_image(fill_color="black", back_color="white")
    
    return qr_image


def display_qr_code(qr_image, certificate_info):
    """
    Display the QR code in a GUI window with certificate information.
    
    Args:
        qr_image (PIL.Image): QR code image to display
        certificate_info (dict): Certificate payload for display
    """
    # Create main window
    root = tk.Tk()
    root.title("Secure Data Wipe Certificate")
    root.geometry("900x800")  # Increased window size to accommodate larger QR code
    root.configure(bg='white')
    
    # Make window stay on top and grab focus
    root.attributes('-topmost', True)
    root.focus_force()
    
    # Title
    title_label = tk.Label(
        root, 
        text="üîí SECURE DATA WIPE CERTIFICATE", 
        font=('Arial', 16, 'bold'),
        bg='white',
        fg='#2c3e50'
    )
    title_label.pack(pady=20)
    
    # Certificate information frame
    info_frame = tk.Frame(root, bg='white')
    info_frame.pack(pady=10)
    
    # Display certificate details
    info_text = f"""üìã CERTIFICATE DETAILS:

üîß Device Type: {certificate_info['deviceType']}
üÜî Device ID: {certificate_info['deviceID']}
üóìÔ∏è  Wipe Date: {datetime.fromtimestamp(certificate_info['wipeTimestamp']).strftime('%Y-%m-%d %H:%M:%S')}
‚öôÔ∏è  Method: {certificate_info['wipeMethod']}
üîê Data Hash: {certificate_info['dataHash'][:16]}...

üì± Scan the QR code below with the mobile verifier app to validate this certificate offline.
"""
    
    info_label = tk.Label(
        info_frame,
        text=info_text,
        font=('Courier', 10),
        bg='white',
        fg='#34495e',
        justify='left'
    )
    info_label.pack(pady=10)
    
    # QR Code display
    qr_frame = tk.Frame(root, bg='white', relief='solid', bd=2)
    qr_frame.pack(pady=20)
    
    # Resize QR code for better display in GUI
    # Get original size and calculate new size for better visibility
    original_size = qr_image.size
    display_size = (400, 400)  # Fixed size for consistent display
    
    # Resize the QR code image for display while maintaining aspect ratio
    qr_display = qr_image.resize(display_size, Image.NEAREST)  # Use NEAREST for crisp QR codes
    
    # Convert PIL image to PhotoImage for tkinter
    qr_photo = ImageTk.PhotoImage(qr_display)
    qr_label = tk.Label(qr_frame, image=qr_photo, bg='white')
    qr_label.pack(padx=20, pady=20)
    
    # Instructions
    instruction_text = "‚ö†Ô∏è  IMPORTANT: This certificate is valid for offline verification only.\nKeep this QR code secure and do not share unnecessarily."
    instruction_label = tk.Label(
        root,
        text=instruction_text,
        font=('Arial', 9),
        bg='white',
        fg='#e74c3c',
        justify='center'
    )
    instruction_label.pack(pady=10)
    
    # Buttons frame
    button_frame = tk.Frame(root, bg='white')
    button_frame.pack(pady=20)
    
    # Save QR code button
    def save_qr_code():
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"output/certificate_qr_{timestamp}.png"
            qr_image.save(filename)
            messagebox.showinfo("Success", f"QR code saved as {filename}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save QR code: {str(e)}")
    
    save_button = tk.Button(
        button_frame,
        text="üíæ Save QR Code",
        command=save_qr_code,
        font=('Arial', 10),
        bg='#3498db',
        fg='white',
        padx=20,
        pady=5
    )
    save_button.pack(side='left', padx=10)
    
    # Close button
    close_button = tk.Button(
        button_frame,
        text="‚ùå Close",
        command=root.destroy,
        font=('Arial', 10),
        bg='#95a5a6',
        fg='white',
        padx=20,
        pady=5
    )
    close_button.pack(side='left', padx=10)
    
    # Keep reference to prevent garbage collection
    qr_label.image = qr_photo
    
    # Center window on screen
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    # Start the GUI event loop
    root.mainloop()


def main():
    """
    Main function to generate and display the certificate.
    """
    try:
        print("üîí Secure Data Wipe Certificate Generator")
        print("=" * 50)
        
        # Step 1: Create certificate payload
        print("üìã Creating certificate payload...")
        payload = create_certificate_payload()
        
        # Display payload info
        print(f"   Certificate ID: {payload['certificateID']}")
        print(f"   Device Type: {payload['deviceType']}")
        print(f"   Device ID: {payload['deviceID']}")
        print(f"   Wipe Method: {payload['wipeMethod']}")
        print(f"   Timestamp: {datetime.fromtimestamp(payload['wipeTimestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Issuer: {payload['iss']}")
        
        # Step 2: Sign the certificate
        print("\nüîê Signing certificate...")
        jwt_token = sign_certificate(payload)
        print(f"   JWT Token Length: {len(jwt_token)} characters")
        
        # Step 3: Generate QR code
        print("\nüì± Generating QR code...")
        qr_image = generate_qr_code(jwt_token)
        print(f"   QR Code Size: {qr_image.size}")
        
        # Step 4: Save QR code to output folder
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_filename = f"output/certificate_qr_{timestamp}.png"
        qr_image.save(output_filename)
        print(f"   QR Code saved: {output_filename}")
        
        # Step 5: Display the certificate
        print("\nüñ•Ô∏è  Displaying certificate window...")
        print("   Close the window when done.")
        
        display_qr_code(qr_image, payload)
        
        print("\n‚úÖ Certificate generation completed successfully!")
        
    except Exception as e:
        print(f"\n‚ùå Error generating certificate: {str(e)}")
        messagebox.showerror("Certificate Generation Error", str(e))


if __name__ == "__main__":
    main()
