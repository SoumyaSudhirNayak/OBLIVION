#!/usr/bin/env python3
"""
JWT Token Validation Test Script

This script tests the validation of JWT tokens generated by the certificate generator.
It verifies the signature and decodes the payload to ensure integrity.
"""

import jwt
import json
from datetime import datetime

def load_public_key():
    """Load the public key from file"""
    try:
        with open('output/public_key.pem', 'r') as f:
            return f.read()
    except FileNotFoundError:
        print("❌ Public key file not found. Please run generate_keys.py first.")
        return None

def validate_jwt_token(token, public_key):
    """
    Validate a JWT token using the public key
    
    Args:
        token (str): The JWT token to validate
        public_key (str): The public key for verification
        
    Returns:
        dict: Decoded payload if valid, None if invalid
    """
    try:
        # Decode and verify the JWT token
        payload = jwt.decode(token, public_key, algorithms=['RS256'])
        return payload
    except jwt.ExpiredSignatureError:
        print("❌ Token has expired")
        return None
    except jwt.InvalidTokenError as e:
        print(f"❌ Invalid token: {e}")
        return None

def format_timestamp(timestamp):
    """Convert Unix timestamp to readable format"""
    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def main():
    print("🔍 JWT Token Validation Test")
    print("=" * 50)
    
    # Load the public key
    public_key = load_public_key()
    if not public_key:
        return
    
    # Read the JWT token from file
    try:
        with open('output/test_jwt_token.txt', 'r') as f:
            token = f.read().strip()
        print(f"📄 Token loaded from file (length: {len(token)} characters)")
    except FileNotFoundError:
        print("❌ JWT token file not found. Please run certificate_generator.py first.")
        return
    
    # Validate the token
    print("\n🔐 Validating JWT token...")
    payload = validate_jwt_token(token, public_key)
    
    if payload:
        print("✅ Token is valid!")
        print("\n📋 Certificate Details:")
        print("-" * 30)
        print(f"Issuer: {payload.get('iss', 'N/A')}")
        print(f"Device ID: {payload.get('deviceID', 'N/A')}")
        print(f"Wipe Method: {payload.get('wipeMethod', 'N/A')}")
        print(f"Wipe Status: {payload.get('wipeStatus', 'N/A')}")
        
        if 'iat' in payload:
            print(f"Issued At: {format_timestamp(payload['iat'])}")
        if 'wipeTimestamp' in payload:
            print(f"Wipe Timestamp: {format_timestamp(payload['wipeTimestamp'])}")
        
        print(f"Data Hash: {payload.get('dataHash', 'N/A')}")
        
        print("\n🔍 Full Payload:")
        print(json.dumps(payload, indent=2))
    else:
        print("❌ Token validation failed!")

if __name__ == "__main__":
    main()